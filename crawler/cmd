#!/usr/bin/env php
<?php
declare(strict_types=1);

ini_set('max_execution_time', '0');
ini_set('memory_limit', '-1');

require __DIR__ . '/vendor/autoload.php';

chdir(__DIR__);

use Dotenv\Dotenv;
use Longman\Crawler\Database;
use Longman\Crawler\Exceptions\HandleExceptions;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\RotatingFileHandler;
use Monolog\Logger;
use Psr\Log\LoggerInterface;
use Sentry\ClientBuilder;
use Sentry\SentrySdk;
use Sentry\State\HubInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\ContainerBuilder;

// load env variables
$dotEnv = Dotenv::createImmutable(getcwd(), '.env');
$dotEnv->load();

// Initialize logger
container()->singleton(LoggerInterface::class, static function (): Logger {
    $logger = new Logger('production');
    $logger->pushHandler(
        $logHandler = new RotatingFileHandler(__DIR__ . '/data/logs/crawler.log', 0, Logger::DEBUG, true, 0777)
    );
    $logHandler->setFormatter(new LineFormatter(null, null, true, true));

    return $logger;
});

// Initialize sentry
container()->singleton(SentrySdk::class, static function (): ?HubInterface {
    if (! env('SENTRY_DSN')) {
        return null;
    }

    $client = ClientBuilder::create(['dsn' => env('SENTRY_DSN')])->getClient();
    SentrySdk::init()->bindClient($client);

    return SentrySdk::getCurrentHub();
});

$handler = new HandleExceptions(container()->get(LoggerInterface::class), container()->get(SentrySdk::class));

// Initialize database
container()->singleton(Database::class, static function (): Database {
    $database = new Database([
        'host'     => env('DB_HOST'),
        'dbname'   => env('DB_NAME'),
        'user'     => env('DB_USER'),
        'password' => env('DB_PASSWORD'),
        'encoding' => env('DB_ENCODING', 'utf8mb4'),
    ]);

    return $database;
});

$application = new Application('Crawler', '1.0');
$application->add(new Longman\Crawler\Commands\CrawlCommand());
$application->add(new Longman\Crawler\Commands\ImportCommand());
$application->add(new Longman\Crawler\Commands\ExportCommand());

$application->run();
